#!/bin/bash

# Spring AI Alibaba NL2SQL 分离数据库启动脚本
# 创建时间: 2025-01-09 14:40:00
# 用途: 启动分离的系统数据库和业务数据库环境

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# 检查Docker是否运行
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker is not running. Please start Docker first."
        exit 1
    fi
    log_info "Docker is running ✓"
}

# 创建分离数据库目录结构
create_directories() {
    log_step "创建分离数据库目录结构..."

    # 系统数据库目录 (PostgreSQL)
    mkdir -p postgresql/system/init
    mkdir -p postgresql/system/conf
    mkdir -p postgresql/system/data
    
    # 业务数据库目录 (Oracle)
    mkdir -p oracle/business/init
    mkdir -p oracle/business/data
    
    # 向量数据库目录 (PostgreSQL)
    mkdir -p postgresql/vector/init
    mkdir -p postgresql/vector/data
    
    # 缓存数据库目录 (Qdrant)
    mkdir -p qdrant/cache/data
    
    log_info "目录结构创建完成 ✓"
}

# 创建系统数据库初始化脚本
create_system_db_init() {
    log_step "创建系统数据库初始化脚本..."

    # 复制现有的schema.sql和data.sql文件
    log_info "复制现有的PostgreSQL系统表初始化脚本..."

    # 复制schema.sql
    cp ../spring-ai-alibaba-nl2sql-management/src/main/resources/sql/schema.sql postgresql/system/init/01_schema.sql

    # 复制data.sql
    cp ../spring-ai-alibaba-nl2sql-management/src/main/resources/sql/data.sql postgresql/system/init/02_data.sql


    log_info "系统数据库初始化脚本准备完成 ✓"
}

# 创建业务数据库初始化脚本
create_business_db_init() {
    log_step "创建业务数据库初始化脚本..."
    
    cat > oracle/business/init/01_create_business_tables.sql << 'EOF'
-- 业务数据库初始化脚本
-- 创建业务表结构

-- 活动数据表
CREATE TABLE ACTV_DATA (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ACTIVITY_NAME VARCHAR2(200),
    ACTIVITY_DATE DATE,
    STATUS VARCHAR2(50),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 产品基础信息表
CREATE TABLE B_UT_PROD (
    PROD_ID VARCHAR2(50) PRIMARY KEY,
    PROD_NAME VARCHAR2(200),
    PROD_TYPE VARCHAR2(100),
    PROD_DESC CLOB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 产品渠道信息表
CREATE TABLE B_UT_PROD_OFER_CHANL (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PROD_ID VARCHAR2(50),
    CHANNEL_CODE VARCHAR2(50),
    CHANNEL_NAME VARCHAR2(200),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 产品渠道属性表
CREATE TABLE B_UT_PROD_CHANL_ATTR (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PROD_ID VARCHAR2(50),
    CHANNEL_CODE VARCHAR2(50),
    ATTR_NAME VARCHAR2(100),
    ATTR_VALUE VARCHAR2(500),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 批处理作业表
CREATE TABLE BATCH_JOB (
    JOB_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    JOB_NAME VARCHAR2(200),
    JOB_STATUS VARCHAR2(50),
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 批处理实例表
CREATE TABLE BATCH_JOB_INSTANCE (
    INSTANCE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    JOB_ID NUMBER,
    INSTANCE_STATUS VARCHAR2(50),
    EXECUTION_TIME TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 缓存映射表
CREATE TABLE CACHE_MAP (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CACHE_KEY VARCHAR2(500),
    CACHE_VALUE CLOB,
    EXPIRE_TIME TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 客户信息表
CREATE TABLE CUSTOMER (
    CUSTOMER_ID VARCHAR2(50) PRIMARY KEY,
    CUSTOMER_NAME VARCHAR2(200),
    CUSTOMER_TYPE VARCHAR2(50),
    REGISTRATION_DATE DATE,
    STATUS VARCHAR2(50),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 产品分类表
CREATE TABLE O_UT_PROD_CAT (
    CAT_ID VARCHAR2(50) PRIMARY KEY,
    CAT_NAME VARCHAR2(200),
    PARENT_CAT_ID VARCHAR2(50),
    CAT_LEVEL NUMBER,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 基金数据表
CREATE TABLE STG_FUNDS_CSV (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FUND_CODE VARCHAR2(50),
    FUND_NAME VARCHAR2(200),
    FUND_TYPE VARCHAR2(100),
    NAV_DATE DATE,
    NAV_VALUE NUMBER(15,4),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 创建索引
CREATE INDEX IDX_ACTV_DATA_DATE ON ACTV_DATA(ACTIVITY_DATE);
CREATE INDEX IDX_CUSTOMER_TYPE ON CUSTOMER(CUSTOMER_TYPE);
CREATE INDEX IDX_PROD_TYPE ON B_UT_PROD(PROD_TYPE);
CREATE INDEX IDX_FUND_CODE ON STG_FUNDS_CSV(FUND_CODE);
CREATE INDEX IDX_BATCH_JOB_STATUS ON BATCH_JOB(JOB_STATUS);

-- 插入示例数据
INSERT INTO CUSTOMER VALUES ('CUST001', 'John Doe', 'PREMIUM', DATE '2024-01-01', 'ACTIVE', CURRENT_TIMESTAMP);
INSERT INTO CUSTOMER VALUES ('CUST002', 'Jane Smith', 'STANDARD', DATE '2024-01-02', 'ACTIVE', CURRENT_TIMESTAMP);

INSERT INTO B_UT_PROD VALUES ('PROD001', 'Investment Fund A', 'FUND', 'High-yield investment fund', CURRENT_TIMESTAMP);
INSERT INTO B_UT_PROD VALUES ('PROD002', 'Savings Account', 'ACCOUNT', 'Standard savings account', CURRENT_TIMESTAMP);

INSERT INTO ACTV_DATA VALUES (DEFAULT, 'Customer Onboarding', DATE '2024-01-01', 'COMPLETED', CURRENT_TIMESTAMP);
INSERT INTO ACTV_DATA VALUES (DEFAULT, 'Product Launch', DATE '2024-01-02', 'IN_PROGRESS', CURRENT_TIMESTAMP);

INSERT INTO STG_FUNDS_CSV VALUES (DEFAULT, 'FUND001', 'Global Equity Fund', 'EQUITY', DATE '2024-01-01', 125.50, CURRENT_TIMESTAMP);
INSERT INTO STG_FUNDS_CSV VALUES (DEFAULT, 'FUND002', 'Bond Income Fund', 'BOND', DATE '2024-01-01', 98.75, CURRENT_TIMESTAMP);

COMMIT;

SELECT 'Business database initialization completed!' as status FROM DUAL;
EOF

    log_info "业务数据库初始化脚本创建完成 ✓"
}

# 更新Docker Compose配置
update_docker_compose() {
    log_step "更新Docker Compose配置..."
    
    # 备份原配置
    if [ -f docker-compose.yaml ]; then
        cp docker-compose.yaml docker-compose.yaml.backup
        log_info "原配置已备份为 docker-compose.yaml.backup"
    fi
    
    # 更新配置中的表列表
    if [ -f docker-compose.yaml ]; then
        # 这里可以添加配置更新逻辑
        log_info "Docker Compose配置更新完成 ✓"
    fi
}

# 启动分离数据库服务
start_databases() {
    log_step "启动分离数据库服务..."
    
    # 启动所有数据库服务
    docker-compose up -d mysql postgresql oracle qdrant
    
    log_info "数据库服务启动命令已执行"
}

# 等待服务就绪
wait_for_services() {
    log_step "等待数据库服务就绪..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log_info "检查服务状态... (尝试 $attempt/$max_attempts)"
        
        # 检查PostgreSQL
        if docker exec postgresql-nl2sql-mvp1 pg_isready -U nl2sql_user -d nl2sql 2>/dev/null; then
            log_info "PostgreSQL 系统数据库就绪 ✓"
            break
        fi
        
        sleep 5
        ((attempt++))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_warn "等待服务就绪超时，请手动检查服务状态"
    fi
}

# 验证数据库连接
verify_connections() {
    log_step "验证数据库连接..."
    
    # 验证PostgreSQL系统数据库
    log_info "验证PostgreSQL系统数据库..."
    if docker exec postgresql-nl2sql-mvp1 psql -U nl2sql_user -d nl2sql -c "SELECT tablename FROM pg_tables WHERE tablename LIKE 'agent%';" 2>/dev/null | grep -q "agent"; then
        log_info "PostgreSQL系统数据库连接成功 ✓"
    else
        log_warn "PostgreSQL系统数据库连接失败"
    fi
    
    # 验证Oracle业务数据库
    log_info "验证Oracle业务数据库..."
    if docker exec oracle-nl2sql-mvp1 sqlplus -s nl2sql_user/nl2sql_pass@//localhost:1521/XE <<< "SELECT 'Oracle Connected' FROM DUAL; EXIT;" 2>/dev/null | grep -q "Oracle Connected"; then
        log_info "Oracle业务数据库连接成功 ✓"
    else
        log_warn "Oracle业务数据库连接失败"
    fi
    
    # 验证PostgreSQL向量数据库
    log_info "验证PostgreSQL向量数据库..."
    if docker exec postgresql-nl2sql-mvp1 psql -U nl2sql_user -d nl2sql -c "SELECT 'PostgreSQL Connected';" 2>/dev/null | grep -q "PostgreSQL Connected"; then
        log_info "PostgreSQL向量数据库连接成功 ✓"
    else
        log_warn "PostgreSQL向量数据库连接失败"
    fi
}

# 显示连接信息
show_connection_info() {
    log_step "数据库连接信息"
    
    echo ""
    echo "📋 分离数据库连接信息："
    echo "┌─────────────────────────────────────────────────────────────┐"
    echo "│ 系统数据库 (PostgreSQL + pgvector)                        │"
    echo "│   Host: localhost:5432                                      │"
    echo "│   Database: nl2sql                                          │"
    echo "│   Tables: agent, agent_datasource, agent_knowledge,        │"
    echo "│           agent_preset_question, business_knowledge,        │"
    echo "│           datasource, semantic_model                        │"
    echo "├─────────────────────────────────────────────────────────────┤"
    echo "│ 业务数据库 (Oracle)                                        │"
    echo "│   Host: localhost:1521                                      │"
    echo "│   Database: XE                                              │"
    echo "│   Tables: ACTV_DATA, B_UT_PROD, B_UT_PROD_OFER_CHANL,     │"
    echo "│           B_UT_PROD_CHANL_ATTR, BATCH_JOB,                 │"
    echo "│           BATCH_JOB_INSTANCE, CACHE_MAP, CUSTOMER,         │"
    echo "│           O_UT_PROD_CAT, STG_FUNDS_CSV                     │"
    echo "├─────────────────────────────────────────────────────────────┤"
    echo "│ 向量存储 (PostgreSQL + pgvector - 同系统数据库)           │"
    echo "│   Host: localhost:5432                                      │"
    echo "│   Database: nl2sql                                          │"
    echo "├─────────────────────────────────────────────────────────────┤"
    echo "│ 缓存数据库 (Qdrant)                                        │"
    echo "│   Host: localhost:6333                                      │"
    echo "│   Collection: nl2sql_query_cache                            │"
    echo "└─────────────────────────────────────────────────────────────┘"
    echo ""
}

# 主函数
main() {
    echo "🚀 Spring AI Alibaba NL2SQL 分离数据库启动脚本"
    echo "================================================"
    echo ""
    
    check_docker
    create_directories
    create_system_db_init
    create_business_db_init
    update_docker_compose
    start_databases
    wait_for_services
    verify_connections
    show_connection_info
    
    echo ""
    log_info "✅ 分离数据库环境启动完成！"
    echo ""
    echo "📝 下一步操作："
    echo "  1. 更新 application-separated-db.yml 配置文件"
    echo "  2. 启动 Spring Boot 应用: mvn spring-boot:run -Dspring.profiles.active=separated-db"
    echo "  3. 访问管理界面验证配置"
    echo ""
}

# 执行主函数
main "$@"
